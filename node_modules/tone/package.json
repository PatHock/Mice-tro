{
  "_from": "tone",
  "_id": "tone@0.11.11",
  "_inBundle": false,
  "_integrity": "sha512-q1qFm9qMxXVJOBZYT1xUcOnnNnq/CXO0rnWlcwUaRggKkdAVdnouQoSFKKwwsgrOkNRQBTlcVz1ATe5UUHIXNQ==",
  "_location": "/tone",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "tone",
    "fetchSpec": "latest",
    "name": "tone",
    "raw": "tone",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/tone/-/tone-0.11.11.tgz",
  "_shasum": "7af8521eba6df84a910d457485a13705f8c824e5",
  "_shrinkwrap": null,
  "_spec": "tone",
  "_where": "C:\\CS320\\Mice-tro\\Mice-tro",
  "author": {
    "email": "yotammann@gmail.com",
    "name": "Yotam Mann",
    "url": "http://yotammann.info/"
  },
  "bugs": {
    "url": "https://github.com/Tonejs/Tone.js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A Web Audio framework for making interactive music in the browser.",
  "devDependencies": {},
  "files": [
    "./README.md",
    "Tone",
    "build/Tone.js",
    "build/Tone.min.js"
  ],
  "homepage": "https://github.com/Tonejs/Tone.js#readme",
  "keywords": [
    "DSP",
    "Effect",
    "Instrument",
    "Interactive Music",
    "Playback",
    "Signal Processing",
    "Synthesis",
    "Web Audio",
    "Web Audio API"
  ],
  "license": "MIT",
  "main": "build/Tone.js",
  "name": "tone",
  "optionalDependencies": {},
  "readme": "Tone.js\n=========\n\n[![Build Status](https://travis-ci.org/Tonejs/Tone.js.svg?branch=dev)](https://travis-ci.org/Tonejs/Tone.js) [![Coverage Status](https://coveralls.io/repos/github/Tonejs/Tone.js/badge.svg?branch=dev)](https://coveralls.io/github/Tonejs/Tone.js?branch=dev)\n\nTone.js is a Web Audio framework for creating interactive music in the browser. The architecture of Tone.js aims to be familiar to both musicians and audio programmers looking to create web-based audio applications. On the high-level, Tone offers common DAW (digital audio workstation) features like a global transport for scheduling events and prebuilt synths and effects. For signal-processing programmers (coming from languages like Max/MSP), Tone provides a wealth of high performance, low latency building blocks and DSP modules to build your own synthesizers, effects, and complex control signals.\n\n[API](https://tonejs.github.io/docs/)\n\n[Examples](https://tonejs.github.io/examples/)\n\n[Demos](https://tonejs.github.io/demos)\n\n# Installation\n\n* download [full](https://tonejs.github.io/build/Tone.js) | [min](https://tonejs.github.io/build/Tone.min.js)\n* `npm install tone`\n* dev -> `npm install tone@next`\n\n[Full Installation Instruction](https://github.com/Tonejs/Tone.js/wiki/Installation).\n\n# Hello Tone\n\n```javascript\n//create a synth and connect it to the master output (your speakers)\nvar synth = new Tone.Synth().toMaster();\n\n//play a middle 'C' for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");\n```\n\n#### Tone.Synth\n\n[Tone.Synth](https://tonejs.github.io/docs/#Synth) is a basic synthesizer with a single [oscillator](https://tonejs.github.io/docs/#OmniOscillator) and an [ADSR envelope](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\n#### triggerAttackRelease\n\n`triggerAttackRelease` is a combination of two methods: `triggerAttack` when the amplitude is rising (for example from a 'key down' or 'note on' event), and `triggerRelease` is when the amplitude is going back to 0 ('key up' / 'note off').\n\nThe first argument to `triggerAttackRelease` is the frequency which can either be a number (like `440`) or as \"pitch-octave\" notation (like `\"D#2\"`). The second argument is the duration that the note is held. This value can either be in seconds, or as a [tempo-relative value](https://github.com/Tonejs/Tone.js/wiki/Time). The third (optional) argument of `triggerAttackRelease` is _when_ along the AudioContext time the note should play. It can be used to schedule events in the future.\n\n#### Time\n\nTone.js abstracts away the AudioContext time. Instead of defining all values in seconds, any method which takes time as an argument can accept a number or a string. For example `\"4n\"` is a quarter-note, `\"8t\"` is an eighth-note triplet, and `\"1m\"` is one measure. These values can even be composed into expressions.\n\n[Read about Time encodings](https://github.com/Tonejs/Tone.js/wiki/Time).\n\n# Scheduling\n\n### Transport\n\n[Tone.Transport](https://tonejs.github.io/docs/#Transport) is the master timekeeper, allowing for application-wide synchronization and scheduling of sources, signals and events along a shared timeline. Time expressions (like the ones above) are evaluated against the Transport's BPM which can be set like this: `Tone.Transport.bpm.value = 120`.\n\n### Loops\n\nTone.js provides higher-level abstractions for scheduling events. [Tone.Loop](https://tonejs.github.io/docs/#Loop) is a simple way to create a looped callback that can be scheduled to start and stop.\n\n```javascript\n//play a note every quarter-note\nvar loop = new Tone.Loop(function(time){\n\tsynth.triggerAttackRelease(\"C2\", \"8n\", time);\n}, \"4n\");\n```\n\nSince Javascript callbacks are **not** precisely timed, the sample-accurate time of the event is passed into the callback function. **Use this time value to schedule the events**.\n\nYou can then start and stop the loop along the Transport's timeline.\n\n```javascript\n//loop between the first and fourth measures of the Transport's timeline\nloop.start(\"1m\").stop(\"4m\");\n```\n\nThen start the Transport to hear the loop:\n\n```javascript\nTone.Transport.start();\n```\n\n[Read about Tone.js' Event classes](https://github.com/Tonejs/Tone.js/wiki/Events) and [scheduling events with the Transport.](https://github.com/Tonejs/Tone.js/wiki/Transport)\n\n# Instruments\n\nTone has a number of instruments which all inherit from the same [Instrument base class](https://tonejs.github.io/docs/#Instrument), giving them a common API for playing notes. [Tone.Synth](https://tonejs.github.io/docs/#Synth) is composed of one oscillator and an amplitude envelope.\n\n```javascript\n//pass in some initial values for the filter and filter envelope\nvar synth = new Tone.Synth({\n\t\"oscillator\" : {\n\t\t\"type\" : \"pwm\",\n\t\t\"modulationFrequency\" : 0.2\n\t},\n\t\"envelope\" : {\n\t\t\"attack\" : 0.02,\n\t\t\"decay\" : 0.1,\n\t\t\"sustain\" : 0.2,\n\t\t\"release\" : 0.9,\n\t}\n}).toMaster();\n\n//start the note \"D3\" one second from now\nsynth.triggerAttack(\"D3\", \"+1\");\n```\n\nAll instruments are monophonic (one voice) but can be made polyphonic when the constructor is passed in as the second argument to [Tone.PolySynth](https://tonejs.github.io/docs/#PolySynth).\n\n```javascript\n//a 4 voice Synth\nvar polySynth = new Tone.PolySynth(4, Tone.Synth).toMaster();\n//play a chord\npolySynth.triggerAttackRelease([\"C4\", \"E4\", \"G4\", \"B4\"], \"2n\");\n```\n\n[Read more about Instruments.](https://github.com/Tonejs/Tone.js/wiki/Instruments)\n\n# Effects\n\nIn the above examples, the synthesizer was always connected directly to the [master output](https://tonejs.github.io/docs/#Master), but the output of the synth could also be routed through one (or more) effects before going to the speakers.\n\n```javascript\n//create a distortion effect\nvar distortion = new Tone.Distortion(0.4).toMaster();\n//connect a synth to the distortion\nsynth.connect(distortion);\n```\n\n[Read more about Effects](https://github.com/Tonejs/Tone.js/wiki/Effects)\n\n# Sources\n\nTone has a few basic audio sources like [Tone.Oscillator](https://tonejs.github.io/docs/#Oscillator) which has sine, square, triangle, and sawtooth waveforms, a buffer player ([Tone.Player](https://tonejs.github.io/docs/#Player)), a noise generator ([Tone.Noise](https://tonejs.github.io/docs/#Noise)), a few additional oscillator types ([pwm](https://tonejs.github.io/docs/#PWMOscillator), [pulse](https://tonejs.github.io/docs/#PulseOscillator), [fat](https://tonejs.github.io/docs/#FatOscillator), [fm](https://tonejs.github.io/docs/#FMOscillator)) and [external audio input](https://tonejs.github.io/docs/#UserMedia) (when [WebRTC is supported](http://caniuse.com/#feat=stream)).\n\n```javascript\n//a pwm oscillator which is connected to the speaker and started right away\nvar pwm = new Tone.PWMOscillator(\"Bb3\").toMaster().start();\n```\n\n[Read more](https://github.com/Tonejs/Tone.js/wiki/Sources)\n\n# Signals\n\nLike the underlying Web Audio API, Tone.js is built with audio-rate signal control over nearly everything. This is a powerful feature which allows for sample-accurate synchronization and scheduling of parameters.\n\n[Read more](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\n# AudioContext\n\nTone.js creates an AudioContext when it loads and shims it for maximum browser compatibility. The AudioContext can be found at `Tone.context`. Or set your own AudioContext using `Tone.setContext(audioContext)`.\n\n# MIDI\n\nTo use MIDI files, you'll first need to convert them into a JSON format which Tone.js can understand using [MidiConvert](https://tonejs.github.io/MidiConvert/).\n\n# Performance\n\nTone.js makes extensive use of the native Web Audio Nodes such as the GainNode and WaveShaperNode for all signal processing, which enables Tone.js to work well on both desktop and mobile browsers. It uses no ScriptProcessorNodes.\n\n[This wiki](https://github.com/Tonejs/Tone.js/wiki/Performance) article has some suggestions related to performance for best practices.\n\n# Contributing\n\nThere are many ways to contribute to Tone.js. Check out [this wiki](https://github.com/Tonejs/Tone.js/wiki/Contributing) if you're interested.\n\nIf you have questions (or answers) that are not necessarily bugs/issues, please post them to the [forum](https://groups.google.com/forum/#!forum/tonejs).\n\n# References and Inspiration\n\n* [Tuna.js](https://github.com/Dinahmoe/tuna)\n* [Many of Chris Wilson's Repositories](https://github.com/cwilso)\n* [The Spec](http://webaudio.github.io/web-audio-api/)\n* [Sound on Sound - Synth Secrets](http://www.soundonsound.com/sos/may99/articles/synthsec.htm)\n* [Miller Puckette - Theory and Techniques of Electronic Music](http://msp.ucsd.edu/techniques.htm)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Tonejs/Tone.js.git"
  },
  "scripts": {
    "build": "cd gulp && gulp",
    "test": "cd gulp && gulp karma-test"
  },
  "version": "0.11.11"
}
