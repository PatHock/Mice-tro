version '0.1'

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        jcenter()
        maven{
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.5'
        classpath "io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'war'
apply plugin: "jacoco" // for unit test code coverage reports
apply plugin: "io.spring.dependency-management" // for AWS SDK
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'com.moowork.node'


// The last straw for Gretty
// https://github.com/akhikhl/gretty/issues/306

sourceSets {
    main {
        java {
            srcDir 'src/main/java/'
            exclude '**/spring/**'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
        mavenBom 'io.spring.platform:platform-bom:1.1.1.RELEASE'
    }
}



dependencies {
    def tomcatVersion = '8.5.16'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:8.5.2",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"

    implementation(
            'com.amazonaws:aws-java-sdk-s3',
            'org.springframework:spring-jdbc'
    )
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0',
            'org.mockito:mockito-core:2.7.19'

    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
//    compile group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
}

war {
    from('src/main/webapp/js/dist') {
        include 'app.bundle.js'
        into('js')
    }
//    manifest {
//        attributes(
//                "Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(' '))
//    }
}

task war_exploded(type: Sync) {
    into './build/libs/exploded'
    with war
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/JacocoCodeCoverageReports")

    jacocoTestReport {
        reports {
            xml.enabled = true
            csv.enabled = false
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.7
                }
            }
        }
    }

    tomcat {
        httpPort = 8082
        httpsPort = 8091
        httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
        ajpProtocol = 'org.apache.coyote.ajp.AjpNio2Protocol'
    }


    test {
        useJUnitPlatform()
    }

}